predict(patientfit, newpatient, interval="prediction")
qqplot(patientfit$residuals)
qqnorm(patientfit$residuals)
qqline()
qqnorm(patientfit$residuals)
qqline(patientfit$residuals)
plot(patientfit$residuals)
plot(patientfit$residuals~patientfit$fitted.values)
install.packages("DOS2")
library("DOS2")
view(dynarski)
dynarski
View(dynarski)
length(zb)
length(zb)
View(cars)
view(dynarski)
View(dynarski)
View(xb)
View(Xb)
View(dynarski)
zb<-dynarski$zb
Xb<-dynarski[,3:10]
+Xb$afqtpct+Xb$edmissm+Xb$edm+Xb$female,
family=binomial)$fitted.values
p<-glm(zb~Xb$faminc+Xb$incmiss+Xb$black+Xb$hisp
+Xb$afqtpct+Xb$edmissm+Xb$edm+Xb$female,
family=binomial)$fitted.values
dynarski<-mutate(dynarski, p)
library("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
dynarski<-mutate(dynarski, p)
View(dynarski)
library("DOS2")
dynarski<-mutate(dynarski, p)
boxplot(p~zb, data=dynarski)
dmat<-smahal(zb,Xb)
dmat<-addcaliper(dmat,zb,p)
install.packages("optmatch")
library("optmatch")
m<-fullmatch(dmat,min.controls=10,max.controls=10,
omit.fraction=1379/2689)
length(m)
m[1,10]
m[1:10]
m<-fullmatch(dmat,min.controls=10,max.controls=10,
omit.fraction=1379/2689, data=dynarski)
m[1:10]
matched(m)
matched(m)[1:10]
length(m)
sum(matched(m))
summary(m)
optmatch.summary
optmatch$summary
m$summary
m.summary
print(m)
print(m, grouped=T)
summary(m, quantiles=.5)
summary(m, quantiles=c(.5))
summary(m, quantiles=c(.5,.75))
m<-fullmatch(dmat,min.controls=10,max.controls=10,
omit.fraction=1379/2689)
m2<-pairmatch(dmat,controls=10,data=dynarski)
m[0:10]
m2[0:10]
m<-fullmatch(dmat,min.controls=10,max.controls=10,
omit.fraction=1379/2689, data=dynarski)
m[0:10]
matched(m)[0:10]
sum(m[matched(m)]!=m2[matched(m2)])
im <- as.integer(m)
im<-as.integer(m)
im[0:10]
summary(im)
dynarski <- cbind(dynarski, im)
dm <- dynarski[matched[m],]
dm <- dynarski[matched(m),]
View(dm)
View(dm)
dm<-dm[order(dm$im,1-dm$zb),]
View(dm)
which(dm$id==10)
dm[188:198,]
which(dm$id==3051)
dm[1068:1078,]
knitr::opts_chunk$set(echo = TRUE)
lbw<-read.csv2("Data/lbw.csv",sep=",", dec = ".",header=TRUE)
lbw$smoke<-as.factor(lbw$smoke)
lbw$ui<-as.factor(lbw$low)
t1=table(lbw$low,lbw$smoke,dnn=c("Low","Smoke"))
t1
prop.table(t1,2) # the number 2 make R to compute the percentages by column
data<- c(NonSmoker= 0.405, Smoker=0.252)
barplot(data,xlab = "Presence of UI",col = c("green3","red"),ylab="Proportion",ylim = c(0,0.50))
text(1,0.45,"0.405")
text(2,0.28,"0.252")
z=qnorm(0.95, mean = 0, sd=1) # Quantile of the standard normal distribution
E= z*.067 # Margin Error
E
ci.lower=(30/74-29/115)-E
ci.lower
ci.upper=(30/74-29/115)+E
ci.upper
View(lbw)
prop.test(x=lbw[,c(2,3)], alternative = "two.sided",
conf.level = 0.90, correct = FALSE)
prop.test(x=t1, alternative = "two.sided",
conf.level = 0.90, correct = FALSE)
prop.test(x=c(30, 29),n=c(74,115), alternative = "two.sided",
conf.level = 0.90, correct = FALSE)
lbw<-read.csv2("Data/lbw.csv",sep=",", dec = ".",header=TRUE)
lbw$smoke<-as.factor(lbw$smoke)
lbw$ui<-as.factor(lbw$low)
prop.table(t1,2) # the number 2 make R to compute the percentages by column
knitr::opts_chunk$set(echo = TRUE)
soft <- read.delim("softdrink.txt")
View(soft)
soft <- read.table("softdrink.txt", header = T )
View(soft)
soft <- read.table("softdrink.txt", header = T )
pairs(soft)
corr(soft)
cor(soft)
delfit <- lm(y~x1+x2, data=soft)
summary(delfit)
plot(rstandard(delfit), delfit$fitted.values)
plot(delfit$fitted.values, rstandard(delfit))
plot(delfit$fitted.values, rstandard(delfit), ylab="Standardized Residuals", xlab="fitted values")
plot(delfit$fitted.values, rstudent(delfit), ylab="Studentized Residuals", xlab="fitted values")
SR.hats = hatvalues(delfit)
plot(SR.hats, type="h", ylab="Leverage")
text(SR.hats, labels=1:50, cex=1)
abline(h=150, lty=2)
SR.hats = hatvalues(delfit)
plot(SR.hats, type="h", ylab="Leverage")
text(SR.hats, labels=1:50, cex=1)
abline(h=2*3/25, lty=2)
SR.hats = hatvalues(delfit)
plot(SR.hats, type="h", ylab="Leverage")
text(SR.hats, labels=1:25, cex=1)
abline(h=2*3/25, lty=2)
SR.dffits = dffits(lm.SR)
SR.dffits = dffits(delfit)
plot(SR.dffits, type="h", ylab="DFFITS");
abline(h=0)
text(SR.dffits, labels=1:25, cex=1)
abline(h=c(-1,-2*sqrt(p/n),2*sqrt(p/n),1), lty=2)
SR.dffits = dffits(delfit)
plot(SR.dffits, type="h", ylab="DFFITS");
abline(h=0)
text(SR.dffits, labels=1:25, cex=1)
abline(h=c(-1,-2*sqrt(3/25),2*sqrt(3/25),1), lty=2)
SR.dffits = dffits(delfit)
plot(SR.dffits, type="h", ylab="DFFITS");
abline(h=0)
text(SR.dffits, labels=1:25, cex=1)
abline(h=c(-1,1), lty=2)
SR.cooksD = cooks.distance(delfit)
plot(SR.cooksD, type="h", ylab="Cook's distance" , ylim = c(0,1))
text(SR.cooksD, labels=1:25, cex=1)
SR.cooksD = cooks.distance(delfit)
plot(SR.cooksD, type="h", ylab="Cook's distance" , ylim = c(0,1))
text(SR.cooksD, labels=1:25, cex=1)
abline(h=qf(0.50,3,22), lty=2)
SR.cooksD = cooks.distance(delfit)
plot(SR.cooksD, type="h", ylab="Cook's distance")
text(SR.cooksD, labels=1:25, cex=1)
abline(h=qf(0.50,3,22), lty=2)
SR.dfbetas = dfbetas(delfit)
plot(SR.dfbetas[,1], type="h", ylab="DFBETAS", xlab = "Intercept")
abline(h=0, lty=1)
text(SR.dfbetas[,1], labels=1:50, cex=1)
abline(h=c(-1,-2/sqrt(n),2/sqrt(n),1), lty=2)
SR.dfbetas = dfbetas(delfit)
plot(SR.dfbetas[,1], type="h", ylab="DFBETAS", xlab = "Intercept")
abline(h=0, lty=1)
text(SR.dfbetas[,1], labels=1:50, cex=1)
abline(h=c(-1,-2/sqrt(25),2/sqrt(25),1), lty=2)
SR.dfbetas = dfbetas(delfit)
plot(SR.dfbetas[,1], type="h", ylab="DFBETAS", xlab = "Intercept")
abline(h=0, lty=1)
text(SR.dfbetas[,1], labels=1:25, cex=1)
abline(h=c(-1,-2/sqrt(25),2/sqrt(25),1), lty=2)
SR.dfbetas = dfbetas(delfit)
plot(SR.dfbetas[,1], type="h", ylab="DFBETAS", xlab = "Intercept", ylim = c(-1,1))
abline(h=0, lty=1)
text(SR.dfbetas[,1], labels=1:25, cex=1)
abline(h=c(-1,-2/sqrt(25),2/sqrt(25),1), lty=2)
plot(delfit$fitted.values, rstandard(delfit), ylab="Standardized Residuals", xlab="fitted values")
plot(delfit$fitted.values, rstudent(delfit), ylab="Studentized Residuals", xlab="fitted values")
plot(delfit$x, rstudent(delfit))
plot(delfit$fitted.values, rstandard(delfit), ylab="Standardized Residuals", xlab="fitted values")
plot(delfit$fitted.values, rstudent(delfit), ylab="Studentized Residuals", xlab="fitted values")
plot(soft$x, rstudent(delfit))
plot(delfit$fitted.values, rstandard(delfit), ylab="Standardized Residuals", xlab="fitted values")
plot(delfit$fitted.values, rstudent(delfit), ylab="Studentized Residuals", xlab="fitted values")
plot(soft$y, rstudent(delfit))
plot(delfit$fitted.values, rstandard(delfit), ylab="Standardized Residuals", xlab="fitted values")
plot(delfit$fitted.values, rstudent(delfit), ylab="Studentized Residuals", xlab="fitted values")
soft.without <- soft[-c(9),]
View(soft.without)
soft.without <- soft[-c(9),]
delfit.without <- lm(y~x1+x2, data=soft.without)
summary(delfit.without)
plot(delfit.without$fitted.values, rstandard(delfit.without), ylab="Standardized Residuals", xlab="fitted values")
plot(delfit.without$fitted.values, rstudent(delfit.without), ylab="Studentized Residuals", xlab="fitted values")
SR.hats.without = hatvalues(delfit.without)
plot(SR.hats.without, type="h", ylab="Leverage")
text(SR.hats.without, labels=1:25, cex=1)
abline(h=2*3/25, lty=2)
SR.hats.without = hatvalues(delfit.without)
plot(SR.hats.without, type="h", ylab="Leverage")
text(SR.hats.without, labels=1:24, cex=1)
abline(h=2*3/25, lty=2)
SR.dffits.without = dffits(delfit.without)
plot(SR.dffits.without, type="h", ylab="DFFITS");
abline(h=0)
text(SR.dffits.without, labels=1:24, cex=1)
abline(h=c(-1,1), lty=2)
SR.dffits.without = dffits(delfit.without)
plot(SR.dffits.without, type="h", ylab="DFFITS");
abline(h=0)
text(SR.dffits.without, labels=1:24, cex=1)
abline(h=c(-1,1), lty=2)
#DFFITS
SR.dffits.without = dffits(delfit.without)
plot(SR.dffits.without, type="h", ylab="DFFITS");
abline(h=0)
text(SR.dffits.without, labels=1:24, cex=1)
abline(h=c(-1,1), lty=2)
#Cook's distance
SR.cooksD.without = cooks.distance(delfit.without)
plot(SR.cooksD.without, type="h", ylab="Cook's distance")
text(SR.cooksD.without, labels=1:25, cex=1)
abline(h=qf(0.50,3,22), lty=2)
#DFBETAS
SR.dfbetas.without = dfbetas(delfit.without)
plot(SR.dfbetas.without[,1], type="h", ylab="DFBETAS", xlab = "Intercept", ylim = c(-1,1))
abline(h=0, lty=1)
text(SR.dfbetas.without[,1], labels=1:25, cex=1)
abline(h=c(-1,-2/sqrt(25),2/sqrt(25),1), lty=2)
#DFFITS
SR.dffits.without = dffits(delfit.without)
plot(SR.dffits.without, type="h", ylab="DFFITS");
abline(h=0)
text(SR.dffits.without, labels=1:24, cex=1)
abline(h=c(-1,1), lty=2)
#Cook's distance
SR.cooksD.without = cooks.distance(delfit.without)
plot(SR.cooksD.without, type="h", ylab="Cook's distance")
text(SR.cooksD.without, labels=1:25, cex=1)
abline(h=qf(0.50,3,21), lty=2)
#DFBETAS
SR.dfbetas.without = dfbetas(delfit.without)
plot(SR.dfbetas.without[,1], type="h", ylab="DFBETAS", xlab = "Intercept", ylim = c(-1,1))
abline(h=0, lty=1)
text(SR.dfbetas.without[,1], labels=1:25, cex=1)
abline(h=c(-1,-2/sqrt(24),2/sqrt(24),1), lty=2)
soft.without <- soft[-c(9),]
delfit.without <- lm(y~x1+x2, data=soft.without)
summary(delfit.without)
mn=c(-3,4)
sg=matrix(2, -1, -1, 3)
mn=c(-3,4)
sg=matrix(c(2, -1, -1, 3), nrow=2, ncol=2)
mn=c(-3,4)
sg=matrix(c(2, -1, -1, 3), nrow=2, ncol=2)
x <- rmvnorm(n=500, mean=mn, sigma=sg)
mn=c(-3,4)
sg=matrix(c(2, -1, -1, 3), nrow=2, ncol=2)
library("mvtnorm")
x <- rmvnorm(n=500, mean=mn, sigma=sg)
mn=c(-3,4)
sg=matrix(c(2, -1, -1, 3), nrow=2, ncol=2)
library("mvtnorm")
x <- rmvnorm(n=500, mean=mn, sigma=sg)
mn=c(-3,4)
sg=matrix(c(2, -1, -1, 3), nrow=2, ncol=2)
library("mvtnorm")
x <- rmvnorm(n=500, mean=mn, sigma=sg)
colMeans(x)
mn=c(-3,4)
sg=matrix(c(2, -1, -1, 3), nrow=2, ncol=2)
library("mvtnorm")
x <- rmvnorm(n=500, mean=mn, sigma=sg)
colMeans(x)
var(x)
mn=c(-3,4)
sg=matrix(c(2, -1, -1, 3), nrow=2, ncol=2)
library("mvtnorm")
x <- rmvnorm(n=500, mean=mn, sigma=sg)
colMeans(x)
var(x)
plot(x)
library("mvtnorm")
mn=c(-3,4)
sg=matrix(c(2, -1, -1, 3), nrow=2, ncol=2)
x <- rmvnorm(n=500, mean=mn, sigma=sg)
colMeans(x)
var(x)
plot(x)
dmvnorm(x, mean=mn, sigma=sg)
#Density of bivariate with mean (0,0) and identity covariance matrix.
dmvnorm(x=c(0,0))
#Density of bivariate with mean (0,0) and identity covariance matrix exaluated at the point (1,1)
dmvnorm(x=c(1,1))
library("mvtnorm")
mn=c(-3,4)
sg=matrix(c(2, -1, -1, 3), nrow=2, ncol=2)
data <- rmvnorm(n=500, mean=mn, sigma=sg)
colMeans(data)
var(data)
plot(data)
#Density of bivariate with mean (0,0) and identity covariance matrix evaluated at the origin.
dmvnorm(x=c(0,0))
#Density of bivariate with mean (0,0) and identity covariance matrix exaluated at the point (1,0)
dmvnorm(x=c(1,0))
#Density of bivariate with mean (0,0) and identity covariance matrix exaluated at the point (0,1)
dmvnorm(x=c(0,1))
#Density of bivariate with mean (0,0) and identity covariance matrix exaluated at the point (1,1)
dmvnorm(x=c(1,1))
library("mvtnorm")
mn=c(-3,4)
sg=matrix(c(2, -1, -1, 3), nrow=2, ncol=2)
set.seed(100)
data <- rmvnorm(n=500, mean=mn, sigma=sg)
colMeans(data)
var(data)
plot(data)
#Density of bivariate with mean (0,0) and identity covariance matrix evaluated at the origin.
dmvnorm(x=c(0,0))
#Density of bivariate with mean (0,0) and identity covariance matrix exaluated at the point (1,0)
dmvnorm(x=c(1,0))
#Density of bivariate with mean (0,0) and identity covariance matrix exaluated at the point (0,1)
dmvnorm(x=c(0,1))
#Density of bivariate with mean (0,0) and identity covariance matrix exaluated at the point (1,1)
dmvnorm(x=c(1,1))
patients <- read.table("patients.txt", header = T )
patient <- read.table("patient.txt", header = T )
View(patient)
patientfit.severity <- lm(y~x2, data=patient)
patientfit.severity <- lm(y~x2, data=patient)
summary(patientfit.severity)
patientfit.severity <- lm(y~x2, data=patient)
summary(patientfit.severity)
confint(patientfit.severity)
confint(patientfit.severity)[2,]
confint(patientfit.severity)
confint(patientfit.severity)[2,]
lm1 <- lm(x1~x2+x3, data=patient)
lm2 <- lm(x2~x1+x3, data=patient)
lm3 <- lm(x3~x1+x2, data=patient)
lm1 <- lm(x1~x2+x3, data=patient)
vif1 <- 1/(1-summary(lm1)$r.squared)
lm2 <- lm(x2~x1+x3, data=patient)
lm3 <- lm(x3~x1+x2, data=patient)
lm1 <- lm(x1~x2+x3, data=patient)
vif1 <- 1/(1-summary(lm1)$r.squared)
lm2 <- lm(x2~x1+x3, data=patient)
vif1 <- 1/(1-summary(lm2)$r.squared)
lm3 <- lm(x3~x1+x2, data=patient)
vif1 <- 1/(1-summary(lm3)$r.squared)
vif <- c(vif1, vif2, vif3); vif
lm1 <- lm(x1~x2+x3, data=patient)
vif1 <- 1/(1-summary(lm1)$r.squared)
lm2 <- lm(x2~x1+x3, data=patient)
vif2 <- 1/(1-summary(lm2)$r.squared)
lm3 <- lm(x3~x1+x2, data=patient)
vif1 <- 1/(1-summary(lm3)$r.squared)
vif <- c(vif1, vif2, vif3); vif
lm1 <- lm(x1~x2+x3, data=patient)
vif1 <- 1/(1-summary(lm1)$r.squared)
lm2 <- lm(x2~x1+x3, data=patient)
vif2 <- 1/(1-summary(lm2)$r.squared)
lm3 <- lm(x3~x1+x2, data=patient)
vif3 <- 1/(1-summary(lm3)$r.squared)
vif <- c(vif1, vif2, vif3); vif
mean(vif)
anova(patientfit.severity)
anova(patientfit.severity)
patientfit.anxsev <- lm(y~x3+x2, data=patient)
anova(patientfit.anxsev)
5554.9+708.0+7106.4
anova(patientfit.severity)
anova(lm(y~x3+x2, data=patient))
anova(lm(y~x1, data=patient))
anova(lm(y~x3+x1, data=patient))
anova(lm(y~x1+x3+x2), data=patient)
anova(lm(y~x1+x3+x2, data=patient))
knitr::opts_chunk$set(echo = TRUE)
#Enter Data
Temp<-c(110,110 ,111,   111 ,112,   112,    114,    114 ,117,   117,    122,    122,    130 ,130,143,   143)
Yield<-c(70.27,72.29,72.57,74.69,76.09,73.14,75.61,69.56,74.41,73.49,79.18,75.44,81.71,83.03,82.98,80.99)
#Plot data
plot(Yield ~ Temp, ylab = "Yield", xlab = "Temp")
model <- lm(Yield~Temp)
model
plot(Yield ~ Temp, ylab = "Yield", xlab = "Temp",col="blue",pch=16)
abline(mod,col="blue")
plot(Yield ~ Temp, ylab = "Yield", xlab = "Temp",col="blue",pch=16)
plot(Yield ~ Temp, ylab = "Yield", xlab = "Temp",col="blue",pch=16)
abline(model)
plot(Yield ~ Temp, ylab = "Yield", xlab = "Temp",col="blue",pch=16)
#abline(model)
summary(model)
#Enter Data
Temp<-c(110,110 ,111, 111 ,112,  112,  114,  114, 117, 117, 122,    122,    130 ,130,143,   143)
Yield<-c(70.27,72.29,72.57,74.69,76.09,73.14,75.61,69.56,74.41,73.49,79.18,75.44,81.71,83.03,82.98,80.99)
#Numerical summary
summary(Temp)
summary(Yield)
sd(Temp)
sd(Yield)
#Plot data
plot(Yield ~ Temp, ylab = "Yield", xlab = "Temp")
model <- lm(Yield~Temp)
model
plot(Yield ~ Temp, ylab = "Yield", xlab = "Temp",col="blue",pch=16)
abline(model)
summary(model)
plot(model$residuals ~ Temp)
plot(model$residuals ~ Temp)
plot(model$residuals ~ Yield)
plot(model$residuals ~ Temp)
abline(0)
plot(model$residuals ~ Temp)
abline(0,0)
plot(model$residuals ~ Yield)
abline(0,0)
hist(model$residuals)
hist(model$residuals)
qqnorm(model$residuals)
hist(model$residuals)
qqnorm(model$residuals)
qqline(model$residuals)
index=c(1:length(residuals)) # creating index vector for residuals
plot(residuals~index, xlab="Index",ylab = "Residuals",col="red",pch=16)
index=c(1:length(model$residuals)) # creating index vector for residuals
plot(model$residuals~index, xlab="Index",ylab = "Residuals",col="red",pch=16)
abline(0,0)
#Enter Data
Temp<-c(110,110 ,111, 111 ,112,  112, 114, 114, 117, 117, 122, 122, 130 ,130,143, 143)
Yield<-c(70.27,72.29,72.57,74.69,76.09,73.14,75.61,69.56,74.41,73.49,79.18,75.44,81.71,83.03,82.98,80.99)
#Numerical summary
summary(Temp)
summary(Yield)
sd(Temp)
sd(Yield)
yielddata <- data.frame("Temp" = Temp, "Yield"= Yield)
View(yielddata)
#Numerical summary
summary(Temp)
summary(Yield)
sd(Temp)
sd(Yield)
yielddata <- data.frame("Temp" = Temp, "Yield"= Yield)
apply(yielddata, 2, summary)
model <- lm(Yield~Temp)
model
plot(Yield ~ Temp, ylab = "Yield", xlab = "Temp",col="blue",pch=16)
#abline(model)
plot(Yield ~ Temp, ylab = "Yield", xlab = "Temp",col="blue",pch=16)
abline(model)
hist(model$residuals)
qqnorm(model$residuals)
qqline(model$residuals)
#Enter Data
Temp<-c(110,110 ,111, 111 ,112,  112, 114, 114, 117, 117, 122, 122, 130 ,130,143, 143)
Yield<-c(70.27,72.29,72.57,74.69,76.09,73.14,75.61,69.56,74.41,73.49,79.18,75.44,81.71,83.03,82.98,80.99)
model <- lm(Yield~Temp)
model
model <- lm(Yield~Temp)
model
t<-(.33611-0)/.05432
summary(model)
t<-(.33611-0)/.05432
summary(model)
t<-(.33611-0)/.05432
t
summary(model)
t<-(.33611-0)/.05432
2*pt(t,14, lower.tail = F)
hist(model$residuals)
qqnorm(model$residuals)
qqline(model$residuals)
setwd("~/Documents/Year1/992/fp-group-2/treedist")
distances <- read.csv("chr1-all_pairs.rfdist", header=T, sep=" ")
distances <- read.csv("chr1-all_pairs.rfdist", header=T, sep="")
distances <- read.csv("chr1-all_pairs.rfdist", header=T)
View(distances)
distances <- read.csv("chr1-all_pairs.rfdist", sep=" ", skip=1)
distances <- read.csv("chr1-all_pairs.rfdist", sep=" ", skip=1, header=T)
View(distances)
distances <- read.csv("chr1-all_pairs.rfdist", sep=" ", skip=1, header=F)
distances <- read.csv("chr1-all_pairs.rfdist", sep=" ", skip=1, header=F) %>%
select(-1:7)
library("dplyr")
distances <- read.csv("chr1-all_pairs.rfdist", sep=" ", skip=1, header=F) %>%
select(-1:7)
View(distances)
distances <- read.csv("chr1-all_pairs.rfdist", sep=" ", skip=1, header=F)
View(distances)
View(distances)
distances <- read.csv("chr1-all_pairs.rfdist", sep=" ", skip=1, header=F) %>%
select(8:)
distances <- read.csv("chr1-all_pairs.rfdist", sep=" ", skip=1, header=F) %>%
select(8:ncol(distances))
View(distances)
